// Copyright (c) 2023, JFXcore. All rights reserved.
// Use of this source code is governed by the BSD-3-Clause license that can be found in the LICENSE file.

package org.jfxcore.gradle.tasks;

import org.gradle.api.GradleException;
import org.gradle.api.Project;
import org.gradle.api.provider.SetProperty;
import org.gradle.api.tasks.Internal;
import org.gradle.api.tasks.SourceSet;
import org.gradle.api.tasks.TaskAction;
import org.jfxcore.gradle.compiler.CompilerService;
import org.jfxcore.gradle.compiler.ExceptionHelper;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;

public abstract class CompileMarkupTask extends MarkupTask {

    public static final String VERB = "compile";

    @Internal
    public abstract SetProperty<Path> getGeneratedJavaFiles();

    @TaskAction
    public void compile() {
        Project project = getProject();
        SourceSet sourceSet = getSourceSet().get();

        ExceptionHelper.run(project, sourceSet, () -> {
            var compiler = CompilerService.get(project).getCompiler(sourceSet);
            if (compiler == null) {
                throw new GradleException(String.format(":%s cannot be run in isolation", getName()));
            }

            try {
                compiler.compileFiles();
            } catch (RuntimeException ex) {
                // If we fail to compile the FXML files, we need to delete all stubs that were
                // generated by ProcessMarkupTask. This is done so that the up-to-date state of
                // ProcessMarkupTask is invalidated for the next build execution.
                for (Path file : getGeneratedJavaFiles().get()) {
                    if (Files.exists(file)) {
                        try {
                            Files.delete(file);
                        } catch (IOException ex2) {
                            throw new GradleException("Cannot delete " + file, ex2);
                        }
                    }
                }

                throw ex;
            }
        });
    }

}
